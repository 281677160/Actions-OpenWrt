#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/281677160/build-actions
# Description: Build OpenWrt using GitHub Actions
#

name: 编译OpenWrt固件
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: '请输入您要编译的源码仓库,比如： coolsnowwolf/lede'
        required: true
        default: ''
      REPO_BRANCH:
        description: '请输入源码的分支,比如： master'
        required: true
        default: ''
      CONFIG_FILE:
        description: '请输入[seed]文件夹里的配置文件名称'
        required: true
        default: ''
      TEMPOARY_IP:
        description: '请输入固件后台IP,比如： 192.168.1.1'
        required: true
        default: ''
      UPLOAD_FIRMWARE:
        description: '上传固件到 Artifacts'
        required: true
        default: 'true'
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Releases'
        required: true
        default: 'false'
        type: boolean
      CACHEWRTBUILD_SWITCH:
        description: '保留缓存,加速编译'
        required: true
        default: 'true'
        type: boolean
      CHINESE_LANGUAGE_LUCI:
        description: '使用中文LUCI(个别源码缺少依赖编译LUCI会失败)'
        required: true
        default: 'false'
        type: boolean
      DELETE_LOGIN_PASSWORD:
        description: '首次安装固件,免密登录固件'
        required: true
        default: 'true'
        type: boolean
      PACKAGING_FIRMWARE:
        description: '自动打包Amlogic或Rockchip固件'
        required: true
        default: 'true'
        type: boolean


# 定时触发开启开始编译(把下面两个#去掉开启)
  schedule:
   - cron: 1 18 * * *


jobs:
  build:
    runs-on: ubuntu-22.04
    name: 使用[${{ matrix.target }}]编译固件
    
    env:
      FOLDER_NAME: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [devices]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: 检测文件
      run: |
        cd ${GITHUB_WORKSPACE}
        sudo chmod -R +x *
        source $GITHUB_WORKSPACE/build/${{ matrix.target }}/settings.ini
        echo "GIT_REPOSITORY=${{github.repository}}" >> $GITHUB_ENV
        echo "REPO_TOKEN=${{ secrets.REPO_TOKEN }}" >> $GITHUB_ENV
        if [[ -n "${{ inputs.REPO_URL }}" ]]; then
          export SOURCE="$(echo "${{ inputs.REPO_URL }}" |cut -d"/" -f1 |sed "s/\.//g" |sed "s/\-//g")"
          export REPO_URL="https://github.com/$(echo "${{ inputs.REPO_URL }}" |sed s/[[:space:]]//g)"
          export REPO_BRANCH="${{ inputs.REPO_BRANCH }}"
          export CONFIG_FILE="seed/${{ inputs.CONFIG_FILE }}"
          export TEMPOARY_IP="${{ inputs.TEMPOARY_IP }}"
          export UPLOAD_FIRMWARE="${{ inputs.UPLOAD_FIRMWARE }}"
          export UPLOAD_RELEASE="${{ inputs.UPLOAD_RELEASE }}"
          export CACHEWRTBUILD_SWITCH="${{ inputs.CACHEWRTBUILD_SWITCH }}"
          export CHINESE_LANGUAGE_LUCI="${{ inputs.CHINESE_LANGUAGE_LUCI }}"
          export DELETE_LOGIN_PASSWORD="${{ inputs.DELETE_LOGIN_PASSWORD }}"
          export PACKAGING_FIRMWARE="${{ inputs.PACKAGING_FIRMWARE }}"
          export LUCI_VERSION="$(echo "${{ inputs.REPO_BRANCH }}" |cut -d"-" -f2-)"
          export DIY_WORK="${SOURCE}$(echo "${LUCI_VERSION}" |sed "s/\.//g" |sed "s/\-//g")"
        else
          export SOURCE="$(echo "${REPO_URL}" |cut -d"/" -f1 |sed "s/\.//g" |sed "s/\-//g")"
          export REPO_URL="https://github.com/$(echo "${REPO_URL}" |sed s/[[:space:]]//g)"
          export REPO_BRANCH="${REPO_BRANCH}"
          export CONFIG_FILE="seed/${CONFIG_FILE}"
          export TEMPOARY_IP="${TEMPOARY_IP}"
          export UPLOAD_FIRMWARE="${UPLOAD_FIRMWARE}"
          export UPLOAD_RELEASE="${UPLOAD_RELEASE}"
          export CACHEWRTBUILD_SWITCH="${CACHEWRTBUILD_SWITCH}"
          export CHINESE_LANGUAGE_LUCI="${CHINESE_LANGUAGE_LUCI}"
          export DELETE_LOGIN_PASSWORD="${DELETE_LOGIN_PASSWORD}"
          export PACKAGING_FIRMWARE="${PACKAGING_FIRMWARE}"
          export LUCI_VERSION="$(echo "${REPO_BRANCH}" |cut -d"-" -f2-)"
          export DIY_WORK="${SOURCE}$(echo "${LUCI_VERSION}" |sed "s/\.//g" |sed "s/\-//g")"
        fi
        source ${GITHUB_WORKSPACE}/common/common.sh && Diy_wnejian

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq install -y gawk git gettext libssl-dev xsltproc zip git-core wget curl grep python2.7 python3 python3-pip libpython3-dev
        sudo timedatectl set-timezone "Asia/Shanghai"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo mkdir -p /${{ env.DIY_WORK }}
        sudo chown $USER:$GROUPS /${{ env.DIY_WORK }}

    - name: 拉取源码
      working-directory: /${{ env.DIY_WORK }}
      run: |
        df -hT $PWD
        git clone -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf /${{ env.DIY_WORK }}/openwrt $GITHUB_WORKSPACE/openwrt
        source $GITHUB_WORKSPACE/common/common.sh && Diy_checkout
        
    - name: 读取扩展文件2(修改源码之类)
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_partsh
        
    - name: 缓存加速
      if: env.CACHEWRTBUILD_SWITCH == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{ env.TARGET_PROFILE }}"
        prefix: ${{ github.workspace }}/openwrt

    - name: 下载软件源
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 生成配置文件
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_config
        
    - name: 上传[.config]配置文件
      if: steps.package.outcome == 'success'
      uses: actions/upload-artifact@main
      with:
        name: .config-${{ env.SOURCE }}-${{ env.LUCI_VERSION }}-${{ env.TARGET_PROFILE }}-${{ env.CON_DATE }}
        path: ConFig/config.txt
        
    - name: 编译信息
      continue-on-error: true
      run: |
        cd ${GITHUB_WORKSPACE}
        source ${BUILD_PATH}/common.sh && Diy_xinxi

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s

    - name: 整理固件包(需配合自定义文件2设定使用)
      continue-on-error: true
      if: steps.compile.outcome == 'success'
      run: |
        cd ${FIRMWARE_PATH}
        source ${BUILD_PATH}/common.sh && Diy_organize

    - name: 上传固件至Artifacts
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE }}-${{ env.LUCI_VERSION }}-${{ env.LINUX_KERNEL }}-${{ env.TARGET_PROFILE }}-${{ env.FILE_DATE }}-firmware
        path: ${{ env.FIRMWARE_PATH }}

    - name: 发布固件到release
      id: release
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.FILE_NAME }}
        tag: ${{ env.FILE_TAG }}
        token: ${{ secrets.REPO_TOKEN }}
        body: ${{ env.FILE_DATE }}
        allowUpdates: true
        replacesArtifacts: true
        artifacts: "${{ env.FIRMWARE_PATH }}/${{ env.FIRMWARE }}"
        
    - name: 触发自动打包
      if: steps.release.outcome == 'success' && env.REPO_TOKEN && env.PACKAGING_FIRMWARE == 'true'
      run: |
        source ${BUILD_PATH}/common.sh && Packaged_services
