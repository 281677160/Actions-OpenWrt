#
# 打包晶晨固件,请勿修改文件名称（packaging.yml）
#


name: 打包晶晨固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: '请输入源码仓库,比如：coolsnowwolf/lede'
        required: true
        default: ''
      amlogic_model:
        description: '请输入机型,比如：s905d 或 s905d_s905x2'
        required: true
        default: ''
      amlogic_kernel:
        description: '请输入内核,比如：5.10.172 或 5.15.97_6.1.16'
        required: true
        default: ''
      kernel_usage:
        description: "内核仓库：stable、dev、flippy、rk3588"
        required: true
        default: 'stable'
        type: choice
        options:
          - 'stable'
          - 'dev'
          - 'flippy'
          - 'rk3588'
      rootfs_size:
        description: '设置rootfs大小(单位：MiB)'
        required: true
        default: '2560'
        type: choice
        options:
          - '2560'
          - '3840'
          - '5120'
          - '6400'
      auto_kernel:
        description: '是否自动检测最新版本内核'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'false'
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Github Releases'
        required: false
        default: 'true'
        type: boolean
        
  push:
    branches:
      - main
    paths:
      - 'build/devices/relevance/start'

env:
  GIT_REPOSITORY: ${{github.repository}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SOURCE: immortalwrt
  FOLDER_NAME: devices

jobs:
  build:
    name: 打包晶晨固件
    runs-on: ubuntu-22.04

    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: 读取脚本设置
      run: |
        cd ${GITHUB_WORKSPACE}
        if [[ -n "${{ github.event.inputs.amlogic_model }}" ]]; then
          echo "SOURCE="$(echo "${{ inputs.source_branch }}" |cut -d"/" -f1)"" >> ${GITHUB_ENV}
          echo "amlogic_model=${{ inputs.amlogic_model }}" >> ${GITHUB_ENV}
          echo "amlogic_kernel=${{ inputs.amlogic_kernel }}" >> ${GITHUB_ENV}
          echo "auto_kernel=${{ inputs.auto_kernel }}" >> ${GITHUB_ENV}
          echo "kernel_repo=ophub/kernel" >> ${GITHUB_ENV}
          echo "kernel_usage=${{ inputs.kernel_usage }}" >> ${GITHUB_ENV}
          echo "rootfs_size=${{ inputs.rootfs_size }}" >> ${GITHUB_ENV}
          echo "UPLOAD_FIRMWARE=${{ github.event.inputs.UPLOAD_FIRMWARE }}" >> ${GITHUB_ENV}
          echo "UPLOAD_RELEASE=${{ github.event.inputs.UPLOAD_RELEASE }}" >> ${GITHUB_ENV}
        else
          source build/${{ env.FOLDER_NAME }}/relevance/start.ini
          echo "SOURCE=${SOURCE}" >> ${GITHUB_ENV}
          echo "amlogic_model=${amlogic_model}" >> ${GITHUB_ENV}
          echo "amlogic_kernel=${amlogic_kernel}" >> ${GITHUB_ENV}
          echo "auto_kernel=${auto_kernel}" >> ${GITHUB_ENV}
          echo "kernel_repo=ophub/kernel" >> ${GITHUB_ENV}
          echo "kernel_usage=${kernel_usage}" >> ${GITHUB_ENV}
          echo "rootfs_size=${rootfs_size}" >> ${GITHUB_ENV}
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> ${GITHUB_ENV}
          echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> ${GITHUB_ENV}
        fi
      
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc /swapfile
        sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: 在Releases下载 rootfs.tar.gz 压缩包
      working-directory: /workdir
      run: |
        df -hT $PWD
        mkdir -p openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        curl -H "Authorization: Bearer ${{ env.REPO_TOKEN }}" https://api.github.com/repos/${{ env.GIT_REPOSITORY }}/releases/tags/targz -o targz.api
        if [[ `grep -c "${{ env.SOURCE }}-armvirt-64-default-rootfs.tar.gz" "targz.api"` -eq '0' ]]; then
          echo "Releases上targz的tag,不存在 ${{ env.SOURCE }}-armvirt-64-default-rootfs.tar.gz 包"
          echo "请先编译 ${{ env.SOURCE }} 源码的 armvirt-64-default-rootfs.tar.gz 包,再来"
          exit 1
        fi
        echo "build_name=${{ env.amlogic_model }}_${{ env.SOURCE }}_$(date +"%m.%d.%H%M")" >> ${GITHUB_ENV}
        echo "build_tag=$(date +"%m%d%H%M%S")" >> ${GITHUB_ENV}
        wget -q https://github.com/${{ env.GIT_REPOSITORY }}/releases/download/targz/${{ env.SOURCE }}-armvirt-64-default-rootfs.tar.gz -O openwrt/openwrt-armvirt-64-default-rootfs.tar.gz
    
    - name: 打包固件
      id: compile
      uses: ophub/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/*rootfs.tar.gz
        openwrt_board: ${{ env.amlogic_model }}
        openwrt_kernel: ${{ env.amlogic_kernel }}
        auto_kernel: ${{ env.auto_kernel }}
        kernel_repo: ${{ env.kernel_repo }}
        kernel_usage: ${{ env.kernel_usage }}
        openwrt_size: ${{ env.rootfs_size }}
        gh_token: ${{ secrets.REPO_TOKEN }}
        
    - name: 上传固件在 github Artifacts
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.build_name }}_firmware
        path: ${{ env.PACKAGED_OUTPUTPATH }}
        
    - name: 发布固件到 Github Releases
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.amlogic_model }}
        tag: ${{ env.build_tag }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.REPO_TOKEN }}
        body: |
          发布日期：${{ env.date_tg }}
          固件源码：${{ env.source_codename }}
          内核仓库：${{ env.kernel_usage }}
          写入EMMC：Login to OpenWrt → System → Amlogic Service → Install OpenWrt
